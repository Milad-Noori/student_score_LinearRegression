{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ad5f2dec-7733-4813-9976-d4eacca2aec8",
   "metadata": {
    "jupyter": {
     "is_executing": true
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn import metrics\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ea08abbc-5822-41ff-bfcc-5a69de909583",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours Studied</th>\n",
       "      <th>Previous Scores</th>\n",
       "      <th>Extracurricular Activities</th>\n",
       "      <th>Sleep Hours</th>\n",
       "      <th>Sample Question Papers Practiced</th>\n",
       "      <th>Performance Index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7</td>\n",
       "      <td>99</td>\n",
       "      <td>Yes</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>91.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>82</td>\n",
       "      <td>No</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>51</td>\n",
       "      <td>Yes</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>52</td>\n",
       "      <td>Yes</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>75</td>\n",
       "      <td>No</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>66.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>1</td>\n",
       "      <td>49</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>7</td>\n",
       "      <td>64</td>\n",
       "      <td>Yes</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>6</td>\n",
       "      <td>83</td>\n",
       "      <td>Yes</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>74.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>9</td>\n",
       "      <td>97</td>\n",
       "      <td>Yes</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>95.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>7</td>\n",
       "      <td>74</td>\n",
       "      <td>No</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Hours Studied  Previous Scores Extracurricular Activities  Sleep Hours  \\\n",
       "0                 7               99                        Yes            9   \n",
       "1                 4               82                         No            4   \n",
       "2                 8               51                        Yes            7   \n",
       "3                 5               52                        Yes            5   \n",
       "4                 7               75                         No            8   \n",
       "...             ...              ...                        ...          ...   \n",
       "9995              1               49                        Yes            4   \n",
       "9996              7               64                        Yes            8   \n",
       "9997              6               83                        Yes            8   \n",
       "9998              9               97                        Yes            7   \n",
       "9999              7               74                         No            8   \n",
       "\n",
       "      Sample Question Papers Practiced  Performance Index  \n",
       "0                                    1               91.0  \n",
       "1                                    2               65.0  \n",
       "2                                    2               45.0  \n",
       "3                                    2               36.0  \n",
       "4                                    5               66.0  \n",
       "...                                ...                ...  \n",
       "9995                                 2               23.0  \n",
       "9996                                 5               58.0  \n",
       "9997                                 5               74.0  \n",
       "9998                                 0               95.0  \n",
       "9999                                 1               64.0  \n",
       "\n",
       "[10000 rows x 6 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv(\"perfomance.csv\")\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a187c54f-3609-4870-be82-f9486235970d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours Studied</th>\n",
       "      <th>Previous Scores</th>\n",
       "      <th>Extracurricular Activities</th>\n",
       "      <th>Sleep Hours</th>\n",
       "      <th>Sample Question Papers Practiced</th>\n",
       "      <th>Performance Index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7</td>\n",
       "      <td>99</td>\n",
       "      <td>Yes</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>91.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>82</td>\n",
       "      <td>No</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>51</td>\n",
       "      <td>Yes</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>52</td>\n",
       "      <td>Yes</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>75</td>\n",
       "      <td>No</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>66.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>1</td>\n",
       "      <td>49</td>\n",
       "      <td>Yes</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>7</td>\n",
       "      <td>64</td>\n",
       "      <td>Yes</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>6</td>\n",
       "      <td>83</td>\n",
       "      <td>Yes</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>74.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>9</td>\n",
       "      <td>97</td>\n",
       "      <td>Yes</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>95.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>7</td>\n",
       "      <td>74</td>\n",
       "      <td>No</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Hours Studied  Previous Scores Extracurricular Activities  Sleep Hours  \\\n",
       "0                 7               99                        Yes            9   \n",
       "1                 4               82                         No            4   \n",
       "2                 8               51                        Yes            7   \n",
       "3                 5               52                        Yes            5   \n",
       "4                 7               75                         No            8   \n",
       "...             ...              ...                        ...          ...   \n",
       "9995              1               49                        Yes            4   \n",
       "9996              7               64                        Yes            8   \n",
       "9997              6               83                        Yes            8   \n",
       "9998              9               97                        Yes            7   \n",
       "9999              7               74                         No            8   \n",
       "\n",
       "      Sample Question Papers Practiced  Performance Index  \n",
       "0                                    1               91.0  \n",
       "1                                    2               65.0  \n",
       "2                                    2               45.0  \n",
       "3                                    2               36.0  \n",
       "4                                    5               66.0  \n",
       "...                                ...                ...  \n",
       "9995                                 2               23.0  \n",
       "9996                                 5               58.0  \n",
       "9997                                 5               74.0  \n",
       "9998                                 0               95.0  \n",
       "9999                                 1               64.0  \n",
       "\n",
       "[10000 rows x 6 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame(data)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "facc81fd-bc92-465c-a046-965e1098a237",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Hours Studied                       0\n",
       "Previous Scores                     0\n",
       "Extracurricular Activities          0\n",
       "Sleep Hours                         0\n",
       "Sample Question Papers Practiced    0\n",
       "Performance Index                   0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum() ### is there null"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ed9b5da2-ad7e-4f21-9690-120269138ada",
   "metadata": {},
   "outputs": [],
   "source": [
    "#### noise "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2165dfa0-2a1e-4bb6-82de-16891785c02e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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x+fzOcHBwc7p06cDPcQy0bx5c2fo0KGBHoaI6tWrO48//niR21577TUnNjY2QCMqOz/99JMTFBTkLFiwINBDEVWtWjVn1qxZRW4bO3asU6dOnQCNqOwcP37cyczMdBzHcXr27Ol06tTJ72PgGhSPcBwH/fv3x/z587Fy5UrEx8cHekhlrqCgALm5uYEehoh27drh22+/xebNmwv/a968OXr16oXNmzcjODg40EMUd/z4cfzwww+IiYkJ9FBEtGnTptjW/u+//x41atQI0IjKzty5c1GlShV07tw50EMRlZ2djaCgom+bwcHBKCgoCNCIyk7FihURExODw4cPIy0tDd26dfP7GLgG5f8dP34cO3fuLPx6165d2Lx5M6Kjo1G9evUAjkxGv379MG/ePHz66aeIiIjA/v37AQBRUVEIDw8P8OhKb9iwYbjrrrtQvXp1HDt2DPPmzcMXX3yBtLS0QA9NRERERLH1QhUrVkTlypWtWUf0/PPPo2vXrqhRowYyMzMxevRoBAcH43e/+12ghyZi0KBBaN26NSZMmICePXtiw4YNmDNnDubMmRPooYkqKCjA3Llz0bt3b6u2iQNA165dMX78eFSvXh0NGjTA119/jWnTpqFPnz6BHpqYtLQ0OI6DOnXqYOfOnXjhhRdQt25dPPbYY/4fjN8/s1Hqv//7vx0Axf7r3bt3oIcmoqS5AXDmzp0b6KGJ6NOnj1OjRg2nfPnyzrXXXuu0a9fOWbZsWaCHVaZsW4PywAMPODExMU758uWd66+/3nnggQecnTt3BnpYohYtWuQ0bNjQCQ0NderWrevMmTMn0EMSl5aW5gBwtm/fHuihiMvKynKeffZZp3r16k5YWJhzww03OC+99JKTm5sb6KGJ+eijj5wbbrjBKV++vFO1alWnX79+zpEjRwIyFp/jWNQCj4iIiKzANShERESkDgsUIiIiUocFChEREanDAoWIiIjUYYFCRERE6rBAISIiInVYoBAREZE6LFCIiIhIHRYoREREpA4LFCIiIlKHBQoRERGpwwKFiIiI1Pk/lR9gjni1BjkAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['Hours Studied'],df['Performance Index'])\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "35b3f079-3886-4223-ac33-67bd1eb06952",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['Previous Scores'],df['Performance Index'])\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8c2391be-650a-43d1-b359-e0aa048a3021",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['Extracurricular Activities'],df['Performance Index'])\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "62ff66ed-4f8b-4647-9389-1f8fbc562eff",
   "metadata": {},
   "outputs": [],
   "source": [
    "### df1=df['Extracurricular Activities'] > 80"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0d1a268a-626a-4703-b9e7-555f8863fd4c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['Sleep Hours'],df['Performance Index'])\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ae416ea2-afa3-45c5-9803-a38b4cf03da7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['Sample Question Papers Practiced'],df['Performance Index'])\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "908429be-4705-4378-a086-a792853349c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours Studied</th>\n",
       "      <th>Previous Scores</th>\n",
       "      <th>Sleep Hours</th>\n",
       "      <th>Sample Question Papers Practiced</th>\n",
       "      <th>Performance Index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.992900</td>\n",
       "      <td>69.445700</td>\n",
       "      <td>6.530600</td>\n",
       "      <td>4.583300</td>\n",
       "      <td>55.224800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.589309</td>\n",
       "      <td>17.343152</td>\n",
       "      <td>1.695863</td>\n",
       "      <td>2.867348</td>\n",
       "      <td>19.212558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>40.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>5.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>55.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>7.000000</td>\n",
       "      <td>85.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>71.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Hours Studied  Previous Scores   Sleep Hours  \\\n",
       "count   10000.000000     10000.000000  10000.000000   \n",
       "mean        4.992900        69.445700      6.530600   \n",
       "std         2.589309        17.343152      1.695863   \n",
       "min         1.000000        40.000000      4.000000   \n",
       "25%         3.000000        54.000000      5.000000   \n",
       "50%         5.000000        69.000000      7.000000   \n",
       "75%         7.000000        85.000000      8.000000   \n",
       "max         9.000000        99.000000      9.000000   \n",
       "\n",
       "       Sample Question Papers Practiced  Performance Index  \n",
       "count                      10000.000000       10000.000000  \n",
       "mean                           4.583300          55.224800  \n",
       "std                            2.867348          19.212558  \n",
       "min                            0.000000          10.000000  \n",
       "25%                            2.000000          40.000000  \n",
       "50%                            5.000000          55.000000  \n",
       "75%                            7.000000          71.000000  \n",
       "max                            9.000000         100.000000  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8e9d07dd-02bb-4843-9b7e-85570d150e20",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = pd.DataFrame(data, columns=['Hours Studied','Previous Scores','Sleep Hours','Sample Question Papers Practiced'])\n",
    "Y = data ['Performance Index'].values.reshape(-1 , 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f8e35c2e-b969-49b6-862c-71795571bdde",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(10000, 4)\n",
      "(10000, 1)\n"
     ]
    }
   ],
   "source": [
    "print(X.shape)\n",
    "print(Y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "627beaa2-2a0b-415a-8f31-0086d57e7728",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train , X_test , Y_train , Y_test =train_test_split(X,Y, test_size = 0.2  ,  random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2ef5e65f-01ca-441e-816f-13984d6b7ae9",
   "metadata": {},
   "outputs": [],
   "source": [
    "regressor = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0829d414-71cb-4b79-a969-28d8d0b4d0af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: #000;\n",
       "  --sklearn-color-text-muted: #666;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: flex;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "  align-items: start;\n",
       "  justify-content: space-between;\n",
       "  gap: 0.5em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
       "  font-size: 0.6rem;\n",
       "  font-weight: lighter;\n",
       "  color: var(--sklearn-color-text-muted);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"â–¸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"â–¾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 0.5em;\n",
       "  text-align: center;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressor.fit(X_train , Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9dd7a36f-62b6-4c7f-a6cd-48e6c1a3790d",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = regressor.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "45c8fd00-bf65-4778-92a4-c752bf2b9f34",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9879991283609477\n"
     ]
    }
   ],
   "source": [
    "print(regressor.score(X_test , Y_test))      ###### with out cross_validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "cff1b68f-7fe1-4170-8d2f-94b94e369fd3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-33.73400682]\n",
      "[[2.85317851 1.01908297 0.47159548 0.18877617]]\n"
     ]
    }
   ],
   "source": [
    "print(regressor.intercept_)\n",
    "print(regressor.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3f3c78d9-0ec0-437a-b994-7f94584b7d9d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "91.56059226999999"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Y1 = -33.73400682 + (2.85317851*7) + (1.01908297 * 99 ) + (0.47159548 * 9) + (0.18877617 *1)\n",
    "Y1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5010bb87-a550-440b-b8d6-b4ef056146be",
   "metadata": {},
   "outputs": [],
   "source": [
    "#########    when we use cross v alidation ##########"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d5208f36-84c4-47b0-80d9-e48bbc670db0",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import KFold \n",
    "from sklearn.model_selection import cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f6e8b055-ec55-416c-8908-523edcc9fc13",
   "metadata": {},
   "outputs": [],
   "source": [
    "regressor1 = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "c41941d5-56d1-47db-9ffa-94e69ba6d71e",
   "metadata": {},
   "outputs": [],
   "source": [
    "KFold_validation = KFold (4)   ###### if the result is lower than the first prediction we change the KFold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "0c42b314-df81-49a8-a8e0-a4cef09a2e8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "result = cross_val_score(regressor1 , X, Y,  cv = KFold_validation )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "94fc6d6e-e7d5-4c9a-9a4f-04682bb9f2f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.98814555 0.98868747 0.98878721 0.98832709]\n",
      "0.9884868297132803\n"
     ]
    }
   ],
   "source": [
    "print(result)\n",
    "print(np.mean(result))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8f3977f3-6300-4ce7-bf7f-3b4e29866aed",
   "metadata": {},
   "outputs": [],
   "source": [
    "#######  corrolation ######   decide witch one is most effect on ower data set "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a70c04fb-7a09-46db-96a3-b38fdad9c864",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.        , 0.37373035],\n",
       "       [0.37373035, 1.        ]])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comp1 =np.corrcoef (df['Hours Studied']\t,df['Performance Index'])\n",
    "comp1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "8b7d8059-0963-4296-8223-4dc4e3c710de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.        , 0.91518914],\n",
       "       [0.91518914, 1.        ]])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comp2 =np.corrcoef (df['Previous Scores']\t,df['Performance Index'])\n",
    "comp2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ca305e88-2e93-48ef-94af-90fc7ce0d540",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.        , 0.04810584],\n",
       "       [0.04810584, 1.        ]])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comp3 =np.corrcoef (df['Sleep Hours'],df['Performance Index'])\n",
    "comp3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "328ebc2f-c319-43fd-894f-96d5535dc3b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.        , 0.04326833],\n",
       "       [0.04326833, 1.        ]])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "comp4 =np.corrcoef (df['Sample Question Papers Practiced'],df['Performance Index'])\n",
    "comp4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "959bb8cd-8648-4018-9e73-3f37597b3037",
   "metadata": {},
   "outputs": [],
   "source": [
    "########  Previous Scores > Sleep Hours > Sample Question Papers Practiced > Hours Studied"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "06f0ad9b-3b20-467a-8220-1868b8dff15c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours Studied</th>\n",
       "      <th>Previous Scores</th>\n",
       "      <th>Sleep Hours</th>\n",
       "      <th>Sample Question Papers Practiced</th>\n",
       "      <th>Performance Index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7</td>\n",
       "      <td>99</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>91.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>82</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>51</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>52</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>75</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>66.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9995</th>\n",
       "      <td>1</td>\n",
       "      <td>49</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9996</th>\n",
       "      <td>7</td>\n",
       "      <td>64</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9997</th>\n",
       "      <td>6</td>\n",
       "      <td>83</td>\n",
       "      <td>8</td>\n",
       "      <td>5</td>\n",
       "      <td>74.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9998</th>\n",
       "      <td>9</td>\n",
       "      <td>97</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>95.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9999</th>\n",
       "      <td>7</td>\n",
       "      <td>74</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Hours Studied  Previous Scores  Sleep Hours  \\\n",
       "0                 7               99            9   \n",
       "1                 4               82            4   \n",
       "2                 8               51            7   \n",
       "3                 5               52            5   \n",
       "4                 7               75            8   \n",
       "...             ...              ...          ...   \n",
       "9995              1               49            4   \n",
       "9996              7               64            8   \n",
       "9997              6               83            8   \n",
       "9998              9               97            7   \n",
       "9999              7               74            8   \n",
       "\n",
       "      Sample Question Papers Practiced  Performance Index  \n",
       "0                                    1               91.0  \n",
       "1                                    2               65.0  \n",
       "2                                    2               45.0  \n",
       "3                                    2               36.0  \n",
       "4                                    5               66.0  \n",
       "...                                ...                ...  \n",
       "9995                                 2               23.0  \n",
       "9996                                 5               58.0  \n",
       "9997                                 5               74.0  \n",
       "9998                                 0               95.0  \n",
       "9999                                 1               64.0  \n",
       "\n",
       "[10000 rows x 5 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "########  Normalize #######\n",
    "df1 = df.drop(columns = 'Extracurricular Activities')\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "46e5f82d-08d2-4d2b-b04c-88e2c308e0cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import preprocessing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "cd8c5df9-e6e8-4880-91a3-f21a308a74d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours Studied</th>\n",
       "      <th>Previous Scores</th>\n",
       "      <th>Sleep Hours</th>\n",
       "      <th>Sample Question Papers Practiced</th>\n",
       "      <th>Performance Index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.750</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.111111</td>\n",
       "      <td>0.900000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.375</td>\n",
       "      <td>0.711864</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.222222</td>\n",
       "      <td>0.611111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.875</td>\n",
       "      <td>0.186441</td>\n",
       "      <td>0.6</td>\n",
       "      <td>0.222222</td>\n",
       "      <td>0.388889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.500</td>\n",
       "      <td>0.203390</td>\n",
       "      <td>0.2</td>\n",
       "      <td>0.222222</td>\n",
       "      <td>0.288889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.750</td>\n",
       "      <td>0.593220</td>\n",
       "      <td>0.8</td>\n",
       "      <td>0.555556</td>\n",
       "      <td>0.622222</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Hours Studied  Previous Scores  Sleep Hours  \\\n",
       "0          0.750         1.000000          1.0   \n",
       "1          0.375         0.711864          0.0   \n",
       "2          0.875         0.186441          0.6   \n",
       "3          0.500         0.203390          0.2   \n",
       "4          0.750         0.593220          0.8   \n",
       "\n",
       "   Sample Question Papers Practiced  Performance Index  \n",
       "0                          0.111111           0.900000  \n",
       "1                          0.222222           0.611111  \n",
       "2                          0.222222           0.388889  \n",
       "3                          0.222222           0.288889  \n",
       "4                          0.555556           0.622222  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler = preprocessing.MinMaxScaler(feature_range=(0, 1))\n",
    "norm1 = scaler.fit_transform(df1)\n",
    "norm_df = pd.DataFrame(norm1 ,columns=['Hours Studied','Previous Scores','Sleep Hours','Sample Question Papers Practiced','Performance Index'])\n",
    "norm_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "2be04653-04db-464b-be2d-f7c14313b567",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hours Studied</th>\n",
       "      <th>Previous Scores</th>\n",
       "      <th>Sleep Hours</th>\n",
       "      <th>Sample Question Papers Practiced</th>\n",
       "      <th>Performance Index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "      <td>10000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.499113</td>\n",
       "      <td>0.499080</td>\n",
       "      <td>0.506120</td>\n",
       "      <td>0.509256</td>\n",
       "      <td>0.502498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.323664</td>\n",
       "      <td>0.293952</td>\n",
       "      <td>0.339173</td>\n",
       "      <td>0.318594</td>\n",
       "      <td>0.213473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.237288</td>\n",
       "      <td>0.200000</td>\n",
       "      <td>0.222222</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.500000</td>\n",
       "      <td>0.491525</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>0.555556</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.750000</td>\n",
       "      <td>0.762712</td>\n",
       "      <td>0.800000</td>\n",
       "      <td>0.777778</td>\n",
       "      <td>0.677778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Hours Studied  Previous Scores   Sleep Hours  \\\n",
       "count   10000.000000     10000.000000  10000.000000   \n",
       "mean        0.499113         0.499080      0.506120   \n",
       "std         0.323664         0.293952      0.339173   \n",
       "min         0.000000         0.000000      0.000000   \n",
       "25%         0.250000         0.237288      0.200000   \n",
       "50%         0.500000         0.491525      0.600000   \n",
       "75%         0.750000         0.762712      0.800000   \n",
       "max         1.000000         1.000000      1.000000   \n",
       "\n",
       "       Sample Question Papers Practiced  Performance Index  \n",
       "count                      10000.000000       10000.000000  \n",
       "mean                           0.509256           0.502498  \n",
       "std                            0.318594           0.213473  \n",
       "min                            0.000000           0.000000  \n",
       "25%                            0.222222           0.333333  \n",
       "50%                            0.555556           0.500000  \n",
       "75%                            0.777778           0.677778  \n",
       "max                            1.000000           1.000000  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "norm_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a11a3188-66e0-44fa-ae24-30214a4b6549",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-33.73400682]\n",
      "[[2.85317851 1.01908297 0.47159548 0.18877617]]\n"
     ]
    }
   ],
   "source": [
    "print(regressor.intercept_)\n",
    "print(regressor.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "1e34ead5-3610-4f4d-ad74-e8bc47379de1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE is : 1.6185650781179433\n",
      "MSE iS : 4.129528706087853\n",
      "RMSE is : 2.0321241856953165\n",
      "R2 score: 98.79991283609478\n"
     ]
    }
   ],
   "source": [
    "print(\"MAE is :\",metrics.mean_absolute_error(Y_test , y_pred))\n",
    "print(\"MSE iS :\",metrics.mean_squared_error(Y_test , y_pred))\n",
    "print(\"RMSE is :\",np.sqrt(metrics.mean_squared_error(Y_test , y_pred)))\n",
    "print(\"R2 score:\", metrics.r2_score(Y_test , y_pred)*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "aeb72f42-f062-48db-bee3-1181739b2820",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size of X_test: (2000, 4)\n",
      "Size of y_test: (2000, 1)\n",
      "Size of y_pred: (2000, 1)\n"
     ]
    }
   ],
   "source": [
    "print(f'Size of X_test: {X_test.shape}')  \n",
    "print(f'Size of y_test: {Y_test.shape}')  \n",
    "print(f'Size of y_pred: {y_pred.shape}')  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "ab6d344d-7797-498c-9541-222dbfca1a69",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>actual</th>\n",
       "      <th>predictyion</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>53.0</td>\n",
       "      <td>50.767954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>50.0</td>\n",
       "      <td>53.444215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>80.0</td>\n",
       "      <td>78.593166</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24.0</td>\n",
       "      <td>25.054633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>64.0</td>\n",
       "      <td>67.746780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1995</th>\n",
       "      <td>91.0</td>\n",
       "      <td>91.032636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1996</th>\n",
       "      <td>42.0</td>\n",
       "      <td>41.403995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1997</th>\n",
       "      <td>66.0</td>\n",
       "      <td>64.236087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1998</th>\n",
       "      <td>27.0</td>\n",
       "      <td>26.215920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1999</th>\n",
       "      <td>21.0</td>\n",
       "      <td>19.154684</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2000 rows Ã— 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      actual  predictyion\n",
       "0       53.0    50.767954\n",
       "1       50.0    53.444215\n",
       "2       80.0    78.593166\n",
       "3       24.0    25.054633\n",
       "4       64.0    67.746780\n",
       "...      ...          ...\n",
       "1995    91.0    91.032636\n",
       "1996    42.0    41.403995\n",
       "1997    66.0    64.236087\n",
       "1998    27.0    26.215920\n",
       "1999    21.0    19.154684\n",
       "\n",
       "[2000 rows x 2 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "compare = pd.DataFrame({'actual':Y_test.flatten(),'predictyion':y_pred.flatten()})\n",
    "compare"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "e0287098-5ad7-4f31-ad98-7f38df21d072",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x14f05772a20>"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(Y_test ,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa570dfb-49fa-43e6-844c-e9bbcbc7c315",
   "metadata": {},
   "outputs": [],
   "source": [
    "Hours_Studied =float(input(\"the Hours Studied :\")) \n",
    "Previous_Scores = float(input(\"the Previous Scores :\"))\n",
    "Sleep_Hours =float(input(\"the Sleep Hours :\"))\n",
    "Sample_Question_Papers_Practiced = float(input(\"Sample Question Papers Practiced  :\t\"))\t\n",
    "print( -33.73400682 + (2.85317851*Hours_Studied) + (1.01908297 *Previous_Scores) + (0.47159548 * Sleep_Hours) + (0.18877617 * Sample_Question_Papers_Practiced))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51dda62a-d941-4dd8-88ca-4a72c1685f45",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
